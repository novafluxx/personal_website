@using personal_website.Components.Layout
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using personal_website.Services
@using System.Reflection
@inject SecurityService SecurityService

<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    [Inject]
    private LazyAssemblyLoader? AssemblyLoader { get; set; }
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        if (AssemblyLoader == null)
        {
            Console.WriteLine("AssemblyLoader is not initialized");
            return;
        }

        var sanitizedPath = SecurityService.SanitizeInput(args.Path);

        try
        {
            if (!SecurityService.IsUrlSafe(sanitizedPath))
            {
                Console.WriteLine($"Potentially unsafe navigation attempt: {sanitizedPath}");
                return;
            }

            var assembliesToLoad = new List<string>();

            if (sanitizedPath.Contains("aviation"))
            {
                assembliesToLoad.Add("personal_website.Components.Pages.Aviation.dll");
            }
            if (sanitizedPath.Contains("experience"))
            {
                assembliesToLoad.Add("personal_website.Components.Pages.Experience.dll");
            }
            if (sanitizedPath.Contains("contact"))
            {
                assembliesToLoad.Add("personal_website.Components.Pages.Contact.dll");
            }

            if (assembliesToLoad.Any())
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(assembliesToLoad);
                lazyLoadedAssemblies.AddRange(assemblies);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assembly: {ex.Message}");
        }
    }
}